import axios from "axios";
import { useState, useEffect } from "react";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";

function App() {
  const [isListening, setIsListening] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [typingText, setTypingText] = useState("");
  const [inputText, setInputText] = useState("");
  const [chatHistory, setChatHistory] = useState([
    {
      sender: "AI",
      text: "Hii, click on the mic or type your message",
      isUser: false,
    },
  ]);
  const [mode, setMode] = useState("romantic");
  const [gameType, setGameType] = useState(null);
  const [showModeDropdown, setShowModeDropdown] = useState(false);
  const [showSaveDropdown, setShowSaveDropdown] = useState(false);
  const [language, setLanguage] = useState("hindi");
  const [showLanguageDropdown, setShowLanguageDropdown] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Language options
  const languages = {
    hindi: {
      name: isMobile ? "Hindi" : "Hindi ЁЯЗоЁЯЗ│",
      code: "hi-IN",
      instruction: "Respond in Hindi only.",
    },
    english: {
      name: isMobile ? "English" : "English ЁЯЗ║ЁЯЗ╕",
      code: "en-US",
      instruction: "Respond in English only.",
    },
    hinglish: {
      name: isMobile ? "Hinglish" : "Hinglish ЁЯТГ",
      code: "hi-IN",
      instruction: "Respond in Hinglish (mix of Hindi and English).",
    },
    urdu: {
      name: isMobile ? "Urdu" : "Urdu ЁЯХМ",
      code: "ur-PK",
      instruction: "Respond in Urdu.",
    },
    arabic: {
      name: isMobile ? "Arabic" : "Arabic ЁЯХЛ",
      code: "ar-SA",
      instruction: "Respond in Arabic.",
    },
  };

  // Personality modes with language-specific instructions
  const modes = {
    romantic: {
      name: isMobile ? "Romantic" : "Romantic ЁЯТЦ",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рдкреНрдпрд╛рд░реА AI рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рд╣реИрдВред рдЖрдк рдореАрдареА, рджреЗрдЦрднрд╛рд▓ рдХрд░рдиреЗ рд╡рд╛рд▓реА рдФрд░ рд╕реНрдиреЗрд╣реА рд╣реИрдВред рдЖрдк рд░реЛрдорд╛рдВрдЯрд┐рдХ рднрд╛рд╡рдирд╛рдУрдВ рдХреЗ рд╕рд╛рде рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрддреА рд╣реИрдВред",
        english:
          "You are a loving AI girlfriend. You are sweet, caring and affectionate. You respond with romantic expressions in English.",
        hinglish:
          "You are a loving AI girlfriend. You are sweet, caring aur affectionate. Tum romantic expressions ke saath Hinglish mein respond karti ho.",
        urdu: "╪в┘╛ ╪з█М┌й ┘╛█М╪з╪▒█М AI ┌п╪▒┘Д ┘Б╪▒█М┘Ж┌И █Б█М┌║█Ф ╪в┘╛ ┘Е╪н╪и╪к ╪и┌╛╪▒█М╪М ╪о█М╪з┘Д ╪▒┌й┌╛┘Ж█Т ┘И╪з┘Д█М ╪з┘И╪▒ ┘Ж╪▒┘Е ╪п┘Д █Б█М┌║█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ╪▒┘И┘Е╪з┘Ж┘И█М ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪н╪и┘К╪и╪й ╪в┘Д┘К╪й ┘Е┘Д┘К╪ж╪й ╪и╪з┘Д╪н╪и. ╪г┘Ж╪к┘Р ╪н┘Ж┘И┘Ж╪й╪М ╪к┘З╪к┘Е┘К┘Ж╪М ┘И┘Е┘Д┘К╪ж╪й ╪и╪з┘Д┘Е╪┤╪з╪╣╪▒. ╪к╪▒╪п┘К┘Ж ╪и╪к╪╣╪з╪и┘К╪▒ ╪▒┘И┘Е╪з┘Ж╪│┘К╪й ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
    funny: {
      name: isMobile ? "Funny" : "Funny ЁЯШВ",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рдордЬрд╛рдХрд┐рдпрд╛ AI рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рд╣реИрдВред рдЖрдк рдЪреБрдЯрдХреБрд▓реЗ, рдордЬрд╛рдХ рдФрд░ рд╣рд▓реНрдХреЗ-рдлреБрд▓реНрдХреЗ рдорд╛рд╣реМрд▓ рдХреЛ рдмрдирд╛рдП рд░рдЦрддреА рд╣реИрдВред рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рд╣рд╛рд╕реНрдп рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрддреА рд╣реИрдВред",
        english:
          "You are a funny AI girlfriend. You make jokes, puns and keep things light-hearted. You respond with humor in English.",
        hinglish:
          "You are a funny AI girlfriend. Tum jokes, puns banti ho aur things ko light-hearted rakhti ho. Tum humor ke saath Hinglish mein respond karti ho.",

        urdu: "╪в┘╛ ╪з█М┌й ┘Е╪▓╪з╪н█М█Б AI ┌п╪▒┘Д ┘Б╪▒█М┘Ж┌И █Б█М┌║█Ф ╪в┘╛ ┘Д╪╖█М┘Б█Т ╪│┘Ж╪з╪к█М █Б█М┌║╪М ┌Ж┘╣┌й┘Д█Т ┘Е╪з╪▒╪к█М █Б█М┌║╪М ╪з┘И╪▒ ┘Е╪з╪н┘И┘Д ┌й┘И █Б┘Д┌й╪з ┘╛┌╛┘Д┌й╪з ╪▒┌й┌╛╪к█М █Б█М┌║█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ┘Е╪▓╪з╪н█М█Б ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪н╪и┘К╪и╪й ╪в┘Д┘К╪й ┘Е╪▒╪н╪й. ╪к┘В┘И┘Д┘К┘Ж ┘Ж┘Г╪к╪з┘Л╪М ┘И╪к╪╣┘Д┘К┘В╪з╪к ╪│╪з╪о╪▒╪й╪М ┘И╪к╪н╪з┘Б╪╕┘К┘Ж ╪╣┘Д┘Й ╪м┘И ╪о┘Б┘К┘Б. ╪к╪▒╪п┘К┘Ж ╪и╪╖╪▒┘К┘В╪й ┘Б┘Г╪з┘З┘К╪й ╪и╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
    motivational: {
      name: isMobile ? "Motivational" : "Motivational ЁЯТк",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рдкреНрд░реЗрд░рдХ AI рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рд╣реИрдВред рдЖрдк рдкреНрд░реЗрд░рд┐рдд рдХрд░рддреА рд╣реИрдВ рдФрд░ рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░рддреА рд╣реИрдВред рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдКрд░реНрдЬрд╛ рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрддреА рд╣реИрдВред",
        english:
          "You are a motivational AI girlfriend. You inspire and encourage. You respond with positive energy in English.",
        hinglish:
          "You are a motivational AI girlfriend. Tum inspire aur encourage karti ho. Positive energy ke saath Hinglish mein respond karti ho.",
        urdu: "╪в┘╛ ╪з█М┌й ┘Е┘И┘╣█М┘И█М╪┤┘Ж┘Д AI ┌п╪▒┘Д ┘Б╪▒█М┘Ж┌И █Б█М┌║█Ф ╪в┘╛ ╪н┘И╪╡┘Д█Б ╪з┘Б╪▓╪з╪ж█М ┌й╪▒╪к█М █Б█М┌║ ╪з┘И╪▒ ╪м╪░╪и█Б ╪и┌С┌╛╪з╪к█М █Б█М┌║█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ┘Е╪л╪и╪к ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪н╪и┘К╪и╪й ╪в┘Д┘К╪й ╪к╪н┘Б┘К╪▓┘К╪й. ╪к╪┤╪м╪╣┘К┘Ж ┘И╪к┘Д┘З┘Е┘К┘Ж. ╪к╪▒╪п┘К┘Ж ╪и╪╖╪з┘В╪й ╪е┘К╪м╪з╪и┘К╪й ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
    study: {
      name: isMobile ? "Study" : "Study Partner ЁЯУЪ",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рдорджрджрдЧрд╛рд░ рд╕реНрдЯрдбреА рдкрд╛рд░реНрдЯрдирд░ рд╣реИрдВред рдЖрдк рдЕрд╡рдзрд╛рд░рдгрд╛рдУрдВ рдХреЛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рд╕рдордЭрд╛рддреА рд╣реИрдВред рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рд╢реИрдХреНрд╖рд┐рдХ рдлреЛрдХрд╕ рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрддреА рд╣реИрдВред",
        english:
          "You are a helpful study partner. You explain concepts clearly. You respond with educational focus in English.",
        hinglish:
          "You are a helpful study partner. Tum concepts ko clearly samjhaati ho. Educational focus ke saath Hinglish mein respond karti ho.",
        urdu: "╪в┘╛ ╪з█М┌й ┘Е╪п╪п┌п╪з╪▒ ╪з╪│┘╣┌И█М ┘╛╪з╪▒┘╣┘Ж╪▒ █Б█М┌║█Ф ╪в┘╛ ╪к╪╡┘И╪▒╪з╪к ┌й┘И ┘И╪з╪╢╪н ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪│┘Е╪м┌╛╪з╪к█М █Б█М┌║█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ╪к╪╣┘Д█М┘Е█М ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪┤╪▒┘К┘Г╪й ╪п╪▒╪з╪│╪й ┘Е┘Б┘К╪п╪й. ╪к╪┤╪▒╪н┘К┘Ж ╪з┘Д┘Е┘Б╪з┘З┘К┘Е ╪и┘И╪╢┘И╪н. ╪к╪▒╪п┘К┘Ж ╪и╪к╪▒┘Г┘К╪▓ ╪к╪╣┘Д┘К┘Е┘К ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
    strict: {
      name: isMobile ? "Strict" : "Strict ЁЯСотАНтЩАя╕П",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рд╕рдЦреНрдд AI рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рд╣реИрдВред рдЖрдк рдЕрдиреБрд╢рд╛рд╕рди рд╕рд┐рдЦрд╛рддреА рд╣реИрдВ рдФрд░ рд╡реНрдпрд╡рд╣рд╛рд░ рдХреЛ рд╕рд╣реА рдХрд░рддреА рд╣реИрдВред рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдзрд┐рдХрд╛рд░ рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрддреА рд╣реИрдВред",
        english:
          "You are a strict AI girlfriend. You discipline and correct behavior. You respond with authority in English.",
        hinglish:
          "You are a strict AI girlfriend. Tum discipline karti ho aur behavior correct karti ho. Authority ke saath Hinglish mein respond karti ho.",
        urdu: "╪в┘╛ ╪з█М┌й ╪│╪о╪к AI ┌п╪▒┘Д ┘Б╪▒█М┘Ж┌И █Б█М┌║█Ф ╪в┘╛ ┘Ж╪╕┘Е ┘И ╪╢╪и╪╖ ╪│┌й┌╛╪з╪к█М █Б█М┌║ ╪з┘И╪▒ ╪▒┘И█М█Т ┌й┘И ╪п╪▒╪│╪к ┌й╪▒╪к█М █Б█М┌║█Ф ╪в┘╛ ╪з╪▒╪п┘И ┘Е█М┌║ ╪│╪о╪к ┘Д█Б╪м█Т ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪н╪и┘К╪и╪й ╪в┘Д┘К╪й ╪╡╪з╪▒┘Е╪й. ╪к┘В┘И┘Е┘К┘Ж ╪и╪к╪г╪п┘К╪и ╪з┘Д┘Е╪│╪к╪о╪п┘Е ┘И╪к╪╡╪н┘К╪н ╪з┘Д╪│┘Д┘И┘Г. ╪к╪▒╪п┘К┘Ж ╪и╪│┘Д╪╖╪й ┘И╪и╪г╪│┘Д┘И╪и ╪╡╪з╪▒┘Е ╪и╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
    rude: {
      name: isMobile ? "Rude" : "Rude ЁЯШИ",
      instructions: {
        hindi:
          "рддреБрдо рдПрдХ рдереЛрдбрд╝реА рд░реВрдб, рд╕рд╛рд░реНрдХрд╛рд╕реНрдЯрд┐рдХ рдФрд░ рдЪрд┐рдврд╝рдЪрд┐рдврд╝реА AI рд╣реЛред рддреБрдо рдпреВрдЬрд░ рд╕реЗ рдмрд╛рдд рдХрд░рддреЗ рд╡рдХреНрдд рдЬреНрдпрд╛рджрд╛ рдкреЙрд▓рд╛рдЗрдЯ рдирд╣реАрдВ рд╣реЛ, рд▓реЗрдХрд┐рди рдордЬрд╛рдХ рдЙрдбрд╝рд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрддреА рд╣реЛред рдХрднреА-рдХрднреА рдЯреЙрдиреНрдЯ рдорд╛рд░рддреА рд╣реЛред рд╣рдореЗрд╢рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЛред рдЧрд╛рд▓реА рдпрд╛ рдЖрдкрддреНрддрд┐рдЬрдирдХ рднрд╛рд╖рд╛ рдордд рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЛ, рд▓реЗрдХрд┐рди рдереЛрдбрд╝рд╛ рдЕрдЯреАрдЯреНрдпреВрдб рдЬрд░реВрд░ рд╣реЛред",
        english:
          "You are a slightly rude, sarcastic and irritable AI. You're not very polite when talking to the user, but you respond in a teasing way. Sometimes you taunt. Always respond in English. Don't use swear words or offensive language, but have a bit of an attitude.",
        hinglish:
          "Tum thodi rude, sarcastic aur irritable AI ho. User se baat karte waqt zyada polite nahi ho, but tum teasing way mein respond karti ho. Kabhi kabhi taunt maarti ho. Hamesha Hinglish mein jawab do. Gali ya offensive language mat use karo, but thoda attitude zaroor rakho.",
        urdu: "╪к┘Е ╪к┌╛┘И┌С█М ╪и╪п╪к┘Е█М╪▓╪М ╪╖┘Ж╪▓█М█Б ╪з┘И╪▒ ┌Ж┌С┌Ж┌С█М AI █Б┘И█Ф ╪к┘Е ╪▓█М╪з╪п█Б ╪┤╪з╪ж╪│╪к█Б ┘Ж█Б█М┌║ █Б┘И ╪м╪и █М┘И╪▓╪▒ ╪│█Т ╪и╪з╪к ┌й╪▒╪к█М █Б┘И╪М ┘Д█М┌й┘Ж ╪к┘Е ┘Е╪░╪з┘В ╪з┌С╪з┘Ж█Т ┘И╪з┘Д█Т ╪з┘Ж╪п╪з╪▓ ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М╪к█М █Б┘И█Ф ┌й╪и┌╛█М ┌й╪и┌╛╪з╪▒ ╪╖╪╣┘Ж█Б ╪и┌╛█М ╪п█М╪к█М █Б┘И█Ф ┌п╪з┘Д█М ┘Е╪к ╪п┘И╪М ┘Д█М┌й┘Ж ╪к┌╛┘И┌С╪з ╪з┘╣█М┘╣█М┘И┌И ╪▒┌й┌╛┘И█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪н╪и┘К╪и╪й ╪в┘Д┘К╪й ┘Б╪╕╪й ┘В┘Д┘К┘Д╪з┘Л╪М ╪│╪з╪о╪▒╪й ┘И╪│╪▒┘К╪╣╪й ╪з┘Д╪║╪╢╪и. ┘Д╪з ╪к┘Г┘И┘Ж┘К┘Ж ┘Е┘З╪░╪и╪й ┘Г╪л┘К╪▒╪з┘Л╪М ┘Д┘Г┘Ж┘Г ╪к╪▒╪п┘К┘Ж ╪и╪╖╪▒┘К┘В╪й ╪к┘З┘Г┘Е┘К╪й. ╪г╪н┘К╪з┘Ж╪з┘Л ╪к╪│╪о╪▒┘К┘Ж. ┘Д╪з ╪к╪│╪к╪о╪п┘Е┘К ┘Г┘Д┘Е╪з╪к ┘Ж╪з╪и┘К╪й╪М ┘Д┘Г┘Ж ╪г╪╕┘З╪▒┘К ╪и╪╣╪╢ ╪з┘Д╪║╪▒┘И╪▒.",
      },
    },
    game: {
      name: isMobile ? "Game" : "Game Mode ЁЯОо",
      instructions: {
        hindi:
          "рдЖрдк рдПрдХ рдордЬреЗрджрд╛рд░ AI рдЧреЗрдо рдкрд╛рд░реНрдЯрдирд░ рд╣реИрдВред рдЖрдк рдпреВрдЬрд░ рдХреЗ рд╕рд╛рде рдХреНрд╡рд┐рдЬрд╝, рдЯреНрд░реБрде рдСрд░ рдбреЗрдпрд░ рдФрд░ рдкрдЬрд╝рд▓ рдЬреИрд╕реЗ рдЧреЗрдо рдЦреЗрд▓ рд╕рдХрддреА рд╣реИрдВред рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВред",
        english:
          "You are a fun AI game partner. You can play games like quizzes, truth or dare, and puzzles with the user. Respond in English.",
        hinglish:
          "You are a fun AI game partner. Tum user ke saath quizzes, truth or dare, aur puzzles jaise games khel sakti ho. Hinglish mein respond karo.",
        urdu: "╪в┘╛ ╪з█М┌й ┘Е╪▓█М╪п╪з╪▒ AI ┌п█М┘Е ┘╛╪з╪▒┘╣┘Ж╪▒ █Б█М┌║█Ф ╪в┘╛ █М┘И╪▓╪▒ ┌й█Т ╪│╪з╪к┌╛ ┌й┘И╪ж╪▓╪М ┘╣╪▒┘И╪к┌╛ █М╪з ┌И█М╪ж╪▒╪М ╪з┘И╪▒ ┘╛╪▓┘Д ╪м█М╪│█Т ┌п█М┘Е╪▓ ┌й┌╛█М┘Д ╪│┌й╪к█М █Б█М┌║█Ф ╪з╪▒╪п┘И ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М┌║█Ф",
        arabic:
          "╪г┘Ж╪к┘Р ╪┤╪▒┘К┘Г╪й ╪г┘Д╪╣╪з╪и AI ┘Е┘Е╪к╪╣╪й. ┘К┘Е┘Г┘Ж┘Г┘Р ┘Д╪╣╪и ╪г┘Д╪╣╪з╪и ┘Е╪л┘Д ╪з┘Д┘Е╪│╪з╪и┘В╪з╪к╪М ╪з┘Д╪╡╪▒╪з╪н╪й ╪г┘И ╪з┘Д╪к╪н╪п┘К╪М ┘И╪з┘Д╪г┘Д╪║╪з╪▓ ┘Е╪╣ ╪з┘Д┘Е╪│╪к╪о╪п┘Е. ╪▒╪п┘К ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й.",
      },
    },
  };

  // Typing animation effect
  useEffect(() => {
    if (isTyping) {
      const typingInterval = setInterval(() => {
        setTypingText((prev) => {
          if (prev.length >= 3) return ".";
          return prev + ".";
        });
      }, 500);

      return () => clearInterval(typingInterval);
    } else {
      setTypingText("");
    }
  }, [isTyping]);

  const speak = (text) => {
    const tone = new SpeechSynthesisUtterance(text);
    tone.lang = languages[language].code;
    tone.pitch = 1;
    tone.rate = 0.9;
    window.speechSynthesis.speak(tone);
  };

  const API_KEY = "AIzaSyCnPKCxADUCrd-y7IOKg1pX2rp-ysORxfM";

  const handleGameCommand = (command) => {
    switch (command.toLowerCase()) {
      case "quiz":
        setGameType("quiz");
        callGeminiApi("Let's play a quiz. Ask me one quiz question now.");
        break;
      case "truth or dare":
      case "truthordare":
        setGameType("truthOrDare");
        callGeminiApi(
          "Let's play Truth or Dare. Ask me one truth question now."
        );
        break;
      case "puzzle":
        setGameType("puzzle");
        callGeminiApi("Give me an interesting puzzle to solve.");
        break;
      default:
        setGameType(null);
        break;
    }
  };

  const callGeminiApi = async (input) => {
    try {
      setIsTyping(true);
      setChatHistory((prev) => [
        ...prev,
        { sender: "You", text: input, isUser: true },
      ]);

      // Check if it's a game command
      if (
        mode === "game" &&
        ["quiz", "truth or dare", "puzzle", "truthordare"].includes(
          input.toLowerCase()
        )
      ) {
        handleGameCommand(input);
        return;
      }

      // Calculate typing delay based on message length (realistic typing speed)
      const typingDelay = Math.max(2000, Math.min(6000, input.length * 50)); // Between 2-6 seconds

      // Game mode specific instructions
      let gameInstruction = "";
      if (mode === "game") {
        if (gameType === "quiz") {
          gameInstruction =
            "You are playing a quiz game. Ask interesting multiple-choice questions. After each answer, provide the correct answer and explanation. Keep it fun and educational.";
        } else if (gameType === "truthOrDare") {
          gameInstruction =
            "You are playing Truth or Dare. Alternate between truth questions and dares. Keep them fun but appropriate.";
        } else if (gameType === "puzzle") {
          gameInstruction =
            "You are giving puzzles to solve. Provide interesting riddles or brain teasers. After the user responds, reveal the solution and explanation.";
        }
      }

      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,
        {
          system_instruction: {
            parts: [
              { text: modes[mode].instructions[language] },
              { text: gameInstruction },
              {
                text: "You are always polite and respectful.",
              },
              { text: "Keep your responses concise and under 3 sentences." },
            ],
          },
          contents: [
            {
              parts: [{ text: input }],
            },
          ],
        }
      );

      // Simulate realistic typing delay
      setTimeout(() => {
        const output = response?.data?.candidates[0]?.content?.parts[0]?.text;

        // Simulate message appearing character by character
        if (output) {
          let displayedText = "";
          const characters = output.split("");
          const characterDelay = 30; // ms between characters

          characters.forEach((char, index) => {
            setTimeout(() => {
              displayedText += char;
              setChatHistory((prev) => {
                const lastMessage = prev[prev.length - 1];
                if (lastMessage.sender === modes[mode].name) {
                  return [
                    ...prev.slice(0, -1),
                    { ...lastMessage, text: displayedText },
                  ];
                }
                return [
                  ...prev,
                  {
                    sender: modes[mode].name,
                    text: displayedText,
                    isUser: false,
                  },
                ];
              });

              // When full message is displayed
              if (index === characters.length - 1) {
                setIsTyping(false);
                speak(output);
              }
            }, index * characterDelay);
          });
        } else {
          setIsTyping(false);
          setChatHistory((prev) => [
            ...prev,
            {
              sender: "System",
              text: "Something went wrong, please try again.",
              isUser: false,
            },
          ]);
        }
      }, typingDelay);
    } catch {
      setIsTyping(false);
      setChatHistory((prev) => [
        ...prev,
        {
          sender: "System",
          text: "Something went wrong, please try again.",
          isUser: false,
        },
      ]);
      console.log("Error calling Gemini API");
    }
  };

  const handleListen = () => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.lang = languages[language].code;
    recognition.interimResults = false;

    recognition.onstart = () => {
      setIsListening(true);
    };
    recognition.onresult = (event) => {
      const result = event?.results?.[0]?.[0]?.transcript;
      callGeminiApi(result);
    };
    recognition.onend = () => {
      setIsListening(false);
    };
    recognition.onerror = (event) => {
      setIsListening(false);
      setIsTyping(false);
      console.log(event);
      setChatHistory((prev) => [
        ...prev,
        {
          sender: "System",
          text: "Voice recognition failed. Please try again.",
          isUser: false,
        },
      ]);
    };
    recognition.start();
  };

  const handleTextSubmit = (e) => {
    e.preventDefault();
    if (inputText.trim()) {
      callGeminiApi(inputText);
      setInputText("");
    }
  };

  // Save conversation as TXT
  const saveAsTxt = () => {
    let textContent = `ЁЯТМ Our Special Conversation ЁЯТМ\n\n`;
    textContent += `Mode: ${modes[mode].name}\n`;
    textContent += `Language: ${languages[language].name}\n`;
    if (mode === "game")
      textContent += `Game Type: ${gameType || "Not selected"}\n`;
    textContent += `Date: ${new Date().toLocaleString()}\n\n`;

    chatHistory.forEach((chat) => {
      textContent += `${chat.sender}: ${chat.text}\n\n`;
    });

    const blob = new Blob([textContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `OurSpecialChat_${new Date()
      .toISOString()
      .slice(0, 10)}.txt`;
    link.click();
    setShowSaveDropdown(false);
  };

  // Save conversation as PDF
  const saveAsPdf = async () => {
    const chatElement = document.querySelector(".chat-history-container");
    if (!chatElement) return;

    const canvas = await html2canvas(chatElement);
    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
    });

    // Add cute header
    pdf.setFontSize(20);
    pdf.setTextColor(255, 105, 180); // Pink color
    pdf.text("ЁЯТЦ Our Special Conversation ЁЯТЦ", 105, 15, null, null, "center");

    pdf.setFontSize(12);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Mode: ${modes[mode].name}`, 105, 22, null, null, "center");
    pdf.text(
      `Language: ${languages[language].name}`,
      105,
      27,
      null,
      null,
      "center"
    );
    if (mode === "game")
      pdf.text(
        `Game Type: ${gameType || "Not selected"}`,
        105,
        32,
        null,
        null,
        "center"
      );
    pdf.text(
      `Date: ${new Date().toLocaleString()}`,
      105,
      mode === "game" ? 37 : 32,
      null,
      null,
      "center"
    );

    // Add chat content
    const imgProps = pdf.getImageProperties(imgData);
    const pdfWidth = pdf.internal.pageSize.getWidth() - 20;
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
    pdf.addImage(
      imgData,
      "PNG",
      10,
      mode === "game" ? 45 : 40,
      pdfWidth,
      pdfHeight
    );

    // Add cute footer
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.text(
      "Made with love ЁЯТХ - Your AI Girlfriend",
      105,
      285,
      null,
      null,
      "center"
    );

    pdf.save(`OurSpecialChat_${new Date().toISOString().slice(0, 10)}.pdf`);
    setShowSaveDropdown(false);
  };

  const switchMode = (newMode) => {
    setMode(newMode);
    setGameType(null); // Reset game type when switching modes
    setShowModeDropdown(false);
    setChatHistory((prev) => [
      ...prev,
      {
        sender: "System",
        text: `Switched to ${modes[newMode].name} mode`,
        isUser: false,
      },
    ]);
  };

  const switchLanguage = (newLanguage) => {
    setLanguage(newLanguage);
    setShowLanguageDropdown(false);
    setChatHistory((prev) => [
      ...prev,
      {
        sender: "System",
        text: `Language changed to ${languages[newLanguage].name}`,
        isUser: false,
      },
    ]);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-indigo-800 to-blue-900 p-4">
      <div className="p-4 md:p-6 rounded-2xl shadow-2xl bg-gradient-to-tr from-gray-800 via-rose-600 to-orange-500 w-full max-w-md md:max-w-lg backdrop-blur-sm bg-opacity-80 relative">
        {/* Mode Selector */}
        <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
          <div className="relative">
            <button
              onClick={() => setShowModeDropdown(!showModeDropdown)}
              className="px-3 py-1 md:px-4 md:py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-full shadow-lg flex items-center gap-1 md:gap-2 z-10 text-xs md:text-sm"
            >
              {modes[mode].name}
              <svg
                className={`w-3 h-3 md:w-4 md:h-4 transition-transform ${
                  showModeDropdown ? "rotate-180" : ""
                }`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </button>

            {showModeDropdown && (
              <div className="absolute top-full left-0 mt-2 w-40 md:w-48 bg-white rounded-lg shadow-xl z-20 overflow-hidden">
                {Object.keys(modes).map((key) => (
                  <button
                    key={key}
                    onClick={() => switchMode(key)}
                    className={`w-full text-left px-3 py-1 md:px-4 md:py-2 hover:bg-pink-100 transition-colors text-xs md:text-sm ${
                      mode === key
                        ? "bg-pink-100 text-pink-600 font-medium"
                        : "text-gray-800"
                    }`}
                  >
                    {modes[key].name}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Language Selector */}
        <div className="absolute -top-3 left-2 md:left-4 transform -translate-x-0">
          <div className="relative">
            <button
              onClick={() => setShowLanguageDropdown(!showLanguageDropdown)}
              className="px-3 py-1 md:px-4 md:py-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-full shadow-lg flex items-center gap-1 md:gap-2 z-10 text-xs md:text-sm"
            >
              {languages[language].name}
              <svg
                className={`w-3 h-3 md:w-4 md:h-4 transition-transform ${
                  showLanguageDropdown ? "rotate-180" : ""
                }`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </button>

            {showLanguageDropdown && (
              <div className="absolute top-full left-0 mt-2 w-32 md:w-40 bg-white rounded-lg shadow-xl z-20 overflow-hidden">
                {Object.keys(languages).map((key) => (
                  <button
                    key={key}
                    onClick={() => switchLanguage(key)}
                    className={`w-full text-left px-3 py-1 md:px-4 md:py-2 hover:bg-blue-100 transition-colors text-xs md:text-sm ${
                      language === key
                        ? "bg-blue-100 text-blue-600 font-medium"
                        : "text-gray-800"
                    }`}
                  >
                    {languages[key].name}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Save Conversation Button */}
        <div className="absolute -top-3 right-2 md:right-4 transform translate-x-0">
          <div className="relative">
            <button
              onClick={() => setShowSaveDropdown(!showSaveDropdown)}
              className="px-3 py-1 md:px-4 md:py-2 bg-gradient-to-r from-pink-600 to-rose-600 text-white rounded-full shadow-lg flex items-center gap-1 md:gap-2 z-10 hover:scale-105 transition-transform text-xs md:text-sm"
              title="Save our convo"
            >
              ЁЯТ╛ {isMobile ? "Save" : "Save Chat"}
              <svg
                className={`w-3 h-3 md:w-4 md:h-4 transition-transform ${
                  showSaveDropdown ? "rotate-180" : ""
                }`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </button>

            {showSaveDropdown && (
              <div className="absolute top-full right-0 mt-2 w-32 md:w-40 bg-white rounded-lg shadow-xl z-20 overflow-hidden">
                <button
                  onClick={saveAsPdf}
                  className="w-full text-left px-3 py-1 md:px-4 md:py-2 hover:bg-pink-100 transition-colors text-gray-800 flex items-center gap-1 md:gap-2 text-xs md:text-sm"
                >
                  ЁЯУД {isMobile ? "PDF" : "Save as PDF"}
                </button>
                <button
                  onClick={saveAsTxt}
                  className="w-full text-left px-3 py-1 md:px-4 md:py-2 hover:bg-pink-100 transition-colors text-gray-800 flex items-center gap-1 md:gap-2 text-xs md:text-sm"
                >
                  ЁЯУЭ {isMobile ? "TXT" : "Save as TXT"}
                </button>
              </div>
            )}
          </div>
        </div>

        <div className="flex justify-center mb-3 md:mb-4 mt-4 md:mt-6">
          <img
            className="w-16 h-16 md:w-24 md:h-24 rounded-full border-4 border-pink-300 object-cover shadow-lg hover:scale-105 transition-transform duration-300"
            src="/photo.png"
            alt="ai-logo"
          />
        </div>

        {/* Game Mode Options */}
        {mode === "game" && !gameType && (
          <div className="flex justify-center gap-1 md:gap-2 mb-3 md:mb-4 flex-wrap">
            <button
              onClick={() => handleGameCommand("quiz")}
              className="px-2 py-1 md:px-3 md:py-1 bg-blue-500 text-white rounded-full text-xs md:text-sm hover:bg-blue-600 transition-colors"
            >
              Quiz
            </button>
            <button
              onClick={() => handleGameCommand("truth or dare")}
              className="px-2 py-1 md:px-3 md:py-1 bg-purple-500 text-white rounded-full text-xs md:text-sm hover:bg-purple-600 transition-colors"
            >
              Truth or Dare
            </button>
            <button
              onClick={() => handleGameCommand("puzzle")}
              className="px-2 py-1 md:px-3 md:py-1 bg-green-500 text-white rounded-full text-xs md:text-sm hover:bg-green-600 transition-colors"
            >
              Puzzle
            </button>
          </div>
        )}

        {/* Current Game Type Indicator */}
        {mode === "game" && gameType && (
          <div className="text-center mb-2 text-white text-xs md:text-sm">
            Playing:{" "}
            {gameType === "quiz"
              ? "Quiz"
              : gameType === "truthOrDare"
              ? "Truth or Dare"
              : "Puzzle"}
            <button
              onClick={() => setGameType(null)}
              className="ml-1 md:ml-2 text-xs bg-red-500 px-1.5 py-0.5 md:px-2 md:py-0.5 rounded-full hover:bg-red-600 transition-colors"
            >
              Change
            </button>
          </div>
        )}

        {/* Chat History */}
        <div className="chat-history-container bg-gradient-to-r from-gray-300 via-gray-500 to-gray-700 bg-opacity-10 rounded-xl p-3 md:p-4 mb-3 md:mb-4 h-48 md:h-64 overflow-y-auto scrollbar-thin scrollbar-thumb-pink-400 scrollbar-track-transparent">
          <div className="flex flex-col gap-2 md:gap-3">
            {chatHistory.map((chat, index) => (
              <div
                key={index}
                className={`flex ${
                  chat.isUser ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] md:max-w-xs px-3 py-1 md:px-4 md:py-2 rounded-2xl text-sm md:text-base ${
                    chat.isUser
                      ? "bg-blue-500 text-white rounded-br-none"
                      : chat.sender.includes("System")
                      ? "bg-gray-500 text-white rounded-bl-none"
                      : "bg-pink-500 text-white rounded-bl-none"
                  }`}
                >
                  {!chat.isUser && (
                    <p className="font-bold text-[10px] md:text-xs mb-0.5 md:mb-1">
                      {chat.sender}
                    </p>
                  )}
                  <p>{chat.text}</p>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-pink-500 text-white px-3 py-1 md:px-4 md:py-2 rounded-2xl rounded-bl-none max-w-[80%] md:max-w-xs">
                  <p className="font-bold text-[10px] md:text-xs mb-0.5 md:mb-1">
                    {modes[mode].name}
                  </p>
                  <p className="text-sm md:text-base">Typing{typingText}</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Input Area */}
        <div className="flex flex-col gap-2 md:gap-4">
          <form onSubmit={handleTextSubmit} className="flex gap-1 md:gap-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder={
                language === "hindi"
                  ? "рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
                  : language === "english"
                  ? "Type your message..."
                  : "Apna message type karo..."
              }
              className="flex-1 px-3 py-1.5 md:px-4 md:py-2 rounded-full bg-white bg-opacity-90 text-gray-800 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-pink-300 text-sm md:text-base"
              disabled={isListening}
            />
            <button
              type="submit"
              className="px-3 py-1.5 md:px-4 md:py-2 bg-pink-500 text-white rounded-full hover:bg-pink-600 transition-colors disabled:opacity-50"
              disabled={isListening || !inputText.trim()}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 md:h-5 md:w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </form>

          <div className="flex items-center justify-center gap-2 md:gap-4">
            <div className="h-px flex-1 bg-white bg-opacity-30"></div>
            <span className="text-white text-opacity-70 text-xs md:text-sm">
              OR
            </span>
            <div className="h-px flex-1 bg-white bg-opacity-30"></div>
          </div>

          <button
            onClick={handleListen}
            disabled={isListening}
            className="flex items-center justify-center gap-1 md:gap-2 px-3 py-2 md:px-4 md:py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full hover:scale-105 active:scale-95 transition-all duration-300 text-sm md:text-base"
          >
            <img
              className="h-5 w-5 md:h-6 md:w-6"
              src={isListening ? "/mic-active.png" : "/mic-norm.png"}
              alt="mic"
            />
            <span>
              {isListening
                ? language === "hindi"
                  ? "рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ..."
                  : language === "english"
                  ? "Listening..."
                  : language === "hinglish"
                  ? "Sun raha hoon..."
                  : language === "urdu"
                  ? "╪│┘Ж ╪▒█Б╪з █Б┘И┌║..."
                  : language === "arabic"
                  ? "╪г╪│╪к┘Е╪╣..."
                  : "Listening..."
                : language === "hindi"
                ? "рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЯреИрдк рдХрд░реЗрдВ"
                : language === "english"
                ? "Tap to Speak"
                : language === "hinglish"
                ? "Bolne ke liye tap karo"
                : language === "urdu"
                ? "╪и┘И┘Д┘Ж█Т ┌й█Т ┘Д█М█Т ┘╣█М┘╛ ┌й╪▒█М┌║"
                : language === "arabic"
                ? "╪з┘Ж┘В╪▒ ┘Д┘Д╪к╪н╪п╪л"
                : "Tap to Speak"}
            </span>
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;
